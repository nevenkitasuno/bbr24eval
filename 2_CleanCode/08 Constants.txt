1) Ввёл константу:

public PowerSet() : base(20000)
{
    _count = 0;
}

//

file const int SET_SIZE = 20000;

public PowerSet() : base(SET_SIZE)
{
    _count = 0;
}

2, 3) Ввёл константу:

file const int MIN_CAPACITY = 16;

public DynArray()
{
    count = 0;
    MakeArray(MIN_CAPACITY);
}

public void MakeArray(int new_capacity)
{
    if (new_capacity < MIN_CAPACITY)
        new_capacity = MIN_CAPACITY;
    T[] newArray = new T[new_capacity];
    if(array != null)
    {
        Array.Copy(array, newArray, count);
    }
    array = newArray;
    capacity = new_capacity;
}

4, 5) Ввёл константы. Теперь, например, эти параметры проще будет менять для тестов производительности

file const float DECREACE_CAPACITY_BY = 1.5;
file const float MAX_UNUSED_CAPACITY_MULTIPLIER = 2;

public void Remove(int index)
{
    if (index < 0 || index >= count)
        throw new IndexOutOfRangeException();
        // .net 8+ : ArgumentOutOfRangeException.ThrowIfZero<T>(T, String) and others
    count--;
    for (int i = index; i < count; i++)
    {
        array[i] = array[i + 1];
    }
    if (count < capacity / MAX_UNUSED_CAPACITY_MULTIPLIER)
    {
        int potentialCapacity = (int)(capacity / DECREACE_CAPACITY_BY);
        if (potentialCapacity < MIN_CAPACITY)
            potentialCapacity = MIN_CAPACITY;
        MakeArray(potentialCapacity);
    }
}

6) Ввёл константы, можно уменьшить комментарии:

file const int LESS = -1;
file const int EQUAL = 0;
file const int GREATER = 1;

public int Compare(T v1, T v2)
{
    int result = 0;

    if (typeof(T) == typeof(String)) result = String.Compare(v1.ToString(), v2.ToString()); // version for lexicographic string comparison
    else if (v1 is IComparable<T> comparable) result = comparable.CompareTo(v2); // universal comparison

    if (result < 0) result = -1;
    else if (result > 0) result = 1;

    return result;
    // -1 if v1 < v2
    // 0 if v1 == v2
    // +1 if v1 > v2
}

//

public int Compare(T v1, T v2)
{
    int result = 0;

    if (typeof(T) == typeof(String)) result = String.Compare(v1.ToString(), v2.ToString()); // version for lexicographic string comparison
    else if (v1 is IComparable<T> comparable) result = comparable.CompareTo(v2); // universal comparison

    if (result < 0) return LESS; // v1 is less than v2
    else if (result > 0) return GREATER;

    return EQUAL;
}

7) Ввёл константу

file const int FAIL = -1;

public int Put(string value)
{
    int idx = SeekSlot(value);
    if (idx == FAIL) return FAIL;
    slots[idx] = value;
    return idx;
}

8) Заменил переменные на константы

public int HashFun(string key)
{
    // random a [1, p-1], b [0, p-1], simple p - from universal family
    const int A = 2, B = 3, P = 17;
    int x = 0
    foreach (char ch in key) x += (int)ch;
    return (A * x + B) % P % size;
}

9) Ввёл константу

file const int ARRAY_ITERATION_STEP = 3;

private int InternalSeekSlot(string key, Func<string, string, bool> condition)
{
    int h = HashFun(key), step = ARRAY_ITERATION_STEP, offset, possible_slot_in_bounds;

10) Заменил число возраста совершеннолетия в коде на константу для гибкости

file const int MATURITY_AGE = 18;

11) Заменил дату в коде на константу для читаемости

file const int YEAR_ANALYSIS_STARTED = 2015;

12) Задал константой количество обработчиков

file const int ANALYZERS_COUNT = 24;