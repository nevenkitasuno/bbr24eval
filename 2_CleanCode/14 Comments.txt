1.1) if (typeof(T) == typeof(String)) result = String.Compare(v1.ToString(), v2.ToString()); // version for lexicographic string comparison      

1.2) else if (v1 is IComparable<T> comparable) result = comparable.CompareTo(v2); // universal comparison

1.3)

public int Compare(T v1, T v2)
{
    ...

    return result;
    // -1 if v1 < v2
    // 0 if v1 == v2
    // +1 if v1 > v2
}

1.4)

// random a [1, p-1], b [0, p-1] - from universal family
int x = 0, a = 2, b = 3, prime = 17;

1.5) return -1; // if not found

Также можно заменить на константу NOT_FOUND

1.6)

for (int i = expression.Length - 1; i >= 0; i--)
{
    res.Push(expression[i]);
    i--; // skip whitespaces
}

1.7)

for (offset = 0; offset < step; offset++)
{
    h += offset; // ensure iterating through all slots

2.1)

public bool Remove(int _value)
{
    // remove node with given value

Убрать комментарий - и так понятно, что делает метод

2.2)

public void Put(string key, T value)
    {
      // guaranteed write

-

public void GuaranteedPut(string key, T value)

2.3)

public bool Get(T value)
{
    // if set contains value return true, otherwise false
    return FindContainingBucket(value) != -1;
}

-

public bool Has(T value)